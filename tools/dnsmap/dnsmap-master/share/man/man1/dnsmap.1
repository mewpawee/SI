.\" Text automatically generated by txt2man
.TH dnsmap 1 "18 Nov 2019" "dnsmap-0.35" "scan for subdomains using bruteforcing techniques"
.SH NAME
\fBdnsmap \fP- scan for subdomains using bruteforcing techniques
\fB
.SH SYNOPSIS
.nf
.fam C
\fBdnsmap\fP <target-domain> [\fIoptions\fP]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBdnsmap\fP scans a domain for common subdomains using a built-in or an external wordlist (if specified
with \fB-w\fP option). The internal wordlist has around 1000 words in English and Spanish as ns1, firewall,
servicios and smtp. So will be possible search for smtp.example.com inside example.com automatically.
Results can be saved in CSV and human-readable format for further processing. \fBdnsmap\fP does NOT require
root privileges to be run, and should NOT be run with such privileges for security reasons.
.PP
\fBdnsmap\fP was originally released back in 2006 and was inspired by the fictional story "The Thief No One
Saw" by Paul Craig, which can be found in the book "Stealing the Network - How to 0wn the Box".
.PP
\fBdnsmap\fP is mainly meant to be used by pentesters during the information gathering/enumeration phase of
infrastructure security assessments. During the enumeration stage, the security consultant would
typically discover the target company's IP netblocks, domain names, phone numbers, etc.
.PP
Subdomain bruteforcing is another technique that should be used in the enumeration stage, as it's
especially useful when other domain enumeration techniques such as zone transfers don't work (is
rare to see zone transfers being publicly allowed these days by the way).
.PP
Fun things that can happen:
.RS
.IP 1. 4
Finding interesting remote access servers (e.g.: https://extranet.example.com).
.IP 2. 4
Finding badly configured and/or unpatched servers (e.g.: test.example.com).
.IP 3. 4
Finding new domain names which will allow you to map non-obvious/hard-to-find netblocks of your
target organization (registry lookups - aka whois is your friend).
.IP 4. 4
Sometimes you find that some bruteforced subdomains resolve to internal IP addresses (RFC 1918).
This is great as sometimes they are real up-to-date "A" records which means that it *is* possible
to enumerate internal servers of a target organization from the Internet by only using standard
DNS resolving (as opposed to zone transfers for instance).
.IP 5. 4
Discover embedded devices configured using Dynamic DNS services (e.g.: IP Cameras). This method
is an alternative to finding devices via Google hacking techniques.
.SH OPTIONS
.TP
.B
\fB-w\fP <wordlist-file>
Use an external wordlist instead of the built-in one. You can use programs
as crunch or cupp to generate personalized wordlists.
.TP
.B
\fB-r\fP <regular-results-file>
Save results to a plain text file. If a file name isn't supplied, \fBdnsmap\fP will
create an unique filename which includes the current timestamp. e.g.:
dnsmap_example_com_br_2019_11_15_214812.txt. So, you can provide a directory
name only, as \fB-r\fP /tmp.
.TP
.B
\fB-c\fP <csv-results-file>
Save results in CSV format in a file. If a file name isn't provided, \fBdnsmap\fP
will create something as dnsmap_example_com_br_2019_11_15_220114.csv. This
is a similar behaviour from \fB-r\fP option.
.TP
.B
\fB-d\fP <delay-millisecs>
Limit of random delay in milliseconds between successive queries. Delay
value is a maximum random value. e.g. if you enter 1000, each DNS request
will be delayed a *maximum* of 1 second. By default, \fBdnsmap\fP uses a value
of 10 milliseconds of maximum delay between DNS lookups. It is recommended
to use the \fB-d\fP (delay in milliseconds) option in cases where \fBdnsmap\fP is
interfering with your online experience. i.e.: killing your bandwidth. If
used, delay must be between 1 and 300000 milliseconds (5 minutes).
.TP
.B
\fB-i\fP <ips-to-ignore>
IP addresses to ignore in the results (useful if you get obtaining false
positives). Use commas without spaces to separate the IP addresses. The
maximum number of IPs to filter is 5. Example: 203.0.113.10,198.51.199.65
.SH INTERNAL WORDLIST
The built-in wordlist is defined in src/dnsmap.h file. If needed, see the file to know all words.
.SH EXAMPLES
Subdomain bruteforcing using \fBdnsmap\fP's built-in wordlist:
.PP
.nf
.fam C
    $ dnsmap example.com

.fam T
.fi
Subdomain bruteforcing using a user-supplied wordlist:
.PP
.nf
.fam C
    $ dnsmap example.com -w wordlist.txt

.fam T
.fi
Subdomain bruteforcing using the built-in wordlist and saving the results to /tmp/ :
.PP
.nf
.fam C
    $ dnsmap example.com -r /tmp

.fam T
.fi
Example of subdomain bruteforcing using the built-in wordlist, saving the results to /tmp/, and waiting
a random maximum of 300 milliseconds between each request:
.PP
.nf
.fam C
    $ dnsmap example.com -r /tmp/ -d 300

.fam T
.fi
Subdomain bruteforcing with 0.8 seconds delay, saving results in regular and CSV format, filtering 2
user-provided IP and using a user-supplied wordlist:
.PP
.nf
.fam C
    $ dnsmap example.com -d 800 -r /tmp/ -c /tmp/ -i 10.55.206.154,10.55.24.100 -w ./wordlist_TLAs.txt

.fam T
.fi
.SH BUGS
Currently, \fBdnsmap\fP does not yet support parallel scanning and hence take quite a long time.
.PP
New bugs should be reported at https://github.com/resurrecting-open-source-projects/\fBdnsmap\fP/issues
.SH SEE ALSO
\fBcrunch\fP(1), \fBcupp\fP(1), \fBdnsmap-bulk\fP(1)
.SH AUTHOR
\fBdnsmap\fP was originally written by "pagvac" in 2006. Currently it is maintained by volunteers,
inside \fBdnsmap\fP project, at https://github.com/resurrecting-open-source-projects/\fBdnsmap\fP/
.PP
This manpage was written by Joao Eriberto Mota Filho.
